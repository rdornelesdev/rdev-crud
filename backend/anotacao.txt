no backend especificamente na function updateUser eu preciso usar partial

Partial nada mais √© que transformar as propriedades da interface opcional 
e pq isso? pq se eu nao deixar opcional ele vai obrigar o usu√°rio a alterar todas as propriedades.

exemplo de syntax funcional e completa

interface IUser = {
    nome: string;
    email: string;
    senha: string;
}

// O tipo de dados que sua fun√ß√£o update ir√° receber.
// Ele torna os campos da interface IUser OPCIONAIS
// type IUpdateData = Partial<IUser>;

async function updateUser(id: number, data: Partial<IUser>): Promise<User> {
  // 2. Separe o ID da l√≥gica de dados
  // O ID j√° √© passado como um argumento separado

  // Crie um objeto de dados para a atualiza√ß√£o
  const updateData: Partial<IUser> = { ...data };

  // 3. Verifique se a senha foi fornecida antes de hachur√°-la
  if (data.senha) {
    const senhaHash = await argon2.hash(data.senha);
    updateData.senha = senhaHash;
  }

  const update = await prismaClient.user.update({
    where: {
      id: id,
    },
    // Use o objeto 'updateData' que agora s√≥ cont√©m os campos que ser√£o alterados
    data: updateData
  });

  return update;
}
-----------------------

no model -> verifica√ß√£o (login/register)
no controller -> cria√ß√£o (register)
no middleware -> valida√ß√£o do token


üí° Minha recomenda√ß√£o pessoal para aplica√ß√µes com usu√°rios finais √©:
 Cookie + JWT + Sess√£o
Esse modelo permite:
‚Ä¢ Expira√ß√£o controlada por atividade
‚Ä¢ Revoga√ß√£o por dispositivo
‚Ä¢ Valida√ß√£o contextual por fingerprint (IP, navegador, OS, etc.)
A gera√ß√£o do fingerprint pode ser feita com um hash de dados do client, e a valida√ß√£o de risco pode usar pontua√ß√£o com base no caso de uso.
Tokens ainda fazem sentido para integra√ß√µes e APIs, mas isso n√£o significa que s√£o a melhor escolha para login de usu√°rios.

libs pra isso: 
  - jsonwebtoken -> para criar e verificar jwts
  - express-cookie-parser -> para ler cookies do cliente
  - gerar hashs (ja temos, argon2)
  - modelo de Sessao no Prisma

JWT: Funciona como chave de acesso. Cont√©m as informa√ß√µes do usu√°rio (como id, email) e uma expira√ß√£o curta.

Cookie: √© o ve√≠culo seguro que transporta o JWT do servidor para o cliente e vice-versa. Por ser httpOnly, o javascript do frontend nao consegue acess√°-lo.
-> npm install -D @types/express @types/cookie-parser @types/jsonwebtoken

Ses√£o (no banco): √â o registro do estado. O servidor guarda um registro em cada sess√£o ativa. Isso permite rastrear o √∫ltimo acesso, o fingerprint e, principalmente, revogar a sess√£o.